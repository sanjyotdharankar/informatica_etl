{"prompt": "# Mapping: m_Load_Latest_Account\n**Folder:** AccountProcessing\n**Description:** \n\n\n## \ud83d\udcc2 Source Definitions\n### ACCOUNT (SQL Server)\n- `ID`: integer (10,0)\n- `NAME`: varchar (100,0)\n- `PERSONAL`: varchar (255,0)\n- `LASTMODIFIED_DATE`: datetime (19,0)\n\n## \ud83c\udfaf Target Definitions\n### DB_ACCOUNT (SQL Server)\n- `ID`: integer (10,0)\n- `NAME`: varchar (100,0)\n- `PERSONAL`: varchar (255,0)\n- `LASTMODIFIED_DATE`: datetime (19,0)\n\n## \ud83d\udd04 Transformations\n\n### SQ_ACCOUNT (Source Qualifier)\n**Fields by Group:**\n\n#### Group: default\n- `ID` (integer, INPUT/OUTPUT) \u2192 No logic (Precision: 10, Scale: )\n- `NAME` (varchar, INPUT/OUTPUT) \u2192 No logic (Precision: 100, Scale: )\n- `PERSONAL` (varchar, INPUT/OUTPUT) \u2192 No logic (Precision: 255, Scale: )\n- `LASTMODIFIED_DATE` (datetime, INPUT/OUTPUT) \u2192 No logic (Precision: 19, Scale: )\n\n### LKP_MAX_DATE (Lookup Procedure)\n**SQL Override:**\n```sql\nSELECT MAX(LASTMODIFIED_DATE) AS MAX_DATE FROM ACCOUNT\n```\n**Fields by Group:**\n\n#### Group: default\n- `MAX_DATE` (datetime, LOOKUP/OUTPUT) \u2192 No logic (Precision: 19, Scale: )\n\n### EXP_COMPARE_DATE (Expression)\n**Fields by Group:**\n\n#### Group: default\n- `LASTMODIFIED_DATE` (datetime, INPUT) \u2192 No logic (Precision: , Scale: )\n- `MAX_DATE` (datetime, INPUT) \u2192 No logic (Precision: , Scale: )\n- `o_IS_LATEST` (integer, OUTPUT) \u2192 IIF(LASTMODIFIED_DATE = MAX_DATE, 1, 0) (Precision: , Scale: )\n\n### RTR_LATEST_RECORD (Router)\n**Groups:**\n- `LATEST` (None): `(no condition)`\n**Fields by Group:**\n\n#### Group: default\n- `ID` (integer, INPUT) \u2192 No logic (Precision: , Scale: )\n- `NAME` (varchar, INPUT) \u2192 No logic (Precision: 100, Scale: )\n- `PERSONAL` (varchar, INPUT) \u2192 No logic (Precision: 255, Scale: )\n- `LASTMODIFIED_DATE` (datetime, INPUT) \u2192 No logic (Precision: , Scale: )\n- `o_IS_LATEST` (integer, INPUT) \u2192 No logic (Precision: , Scale: )\n\n## \ud83d\udd01 Connector Flow\n- `SQ_ACCOUNT`.`ID` \u279d `RTR_LATEST_RECORD`.`ID`\n- `SQ_ACCOUNT`.`NAME` \u279d `RTR_LATEST_RECORD`.`NAME`\n- `SQ_ACCOUNT`.`PERSONAL` \u279d `RTR_LATEST_RECORD`.`PERSONAL`\n- `SQ_ACCOUNT`.`LASTMODIFIED_DATE` \u279d `EXP_COMPARE_DATE`.`LASTMODIFIED_DATE`\n- `LKP_MAX_DATE`.`MAX_DATE` \u279d `EXP_COMPARE_DATE`.`MAX_DATE`\n- `SQ_ACCOUNT`.`LASTMODIFIED_DATE` \u279d `EXP_COMPARE_DATE`.`LASTMODIFIED_DATE`\n- `EXP_COMPARE_DATE`.`o_IS_LATEST` \u279d `RTR_LATEST_RECORD`.`o_IS_LATEST`\n- `RTR_LATEST_RECORD`.`ID` \u279d `DB_ACCOUNT`.`ID`\n- `RTR_LATEST_RECORD`.`NAME` \u279d `DB_ACCOUNT`.`NAME`\n- `RTR_LATEST_RECORD`.`PERSONAL` \u279d `DB_ACCOUNT`.`PERSONAL`\n- `RTR_LATEST_RECORD`.`LASTMODIFIED_DATE` \u279d `DB_ACCOUNT`.`LASTMODIFIED_DATE`", "completion": "\n```python\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import col, max as spark_max, when\n\n# Start Spark session\nspark = SparkSession.builder \\\n    .appName(\"m_Load_Latest_Account\") \\\n    .config(\"spark.jars\", \"/path/to/sqljdbc42.jar\") \\  # SQL Server JDBC jar\n    .getOrCreate()\n\n# JDBC connection config\njdbc_url = \"jdbc:sqlserver://hostname:port;databaseName=yourDB\"\nconnection_properties = {\n    \"user\": \"your_user\",\n    \"password\": \"your_password\",\n    \"driver\": \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n}\n\n# \ud83d\udce5 Step 1: Read source table\naccount_df = spark.read.jdbc(\n    url=jdbc_url,\n    table=\"ACCOUNT\",\n    properties=connection_properties\n)\n\n# \ud83d\udd0d Step 2: Lookup max LASTMODIFIED_DATE\nmax_date = account_df.agg(spark_max(\"LASTMODIFIED_DATE\").alias(\"MAX_DATE\")).collect()[0][\"MAX_DATE\"]\n\n# \ud83e\udde0 Step 3: Expression transformation (EXP_COMPARE_DATE)\naccount_with_flag_df = account_df.withColumn(\n    \"o_IS_LATEST\",\n    when(col(\"LASTMODIFIED_DATE\") == max_date, 1).otherwise(0)\n)\n\n# \ud83d\udd00 Step 4: Router (RTR_LATEST_RECORD) - Filter for latest records\nlatest_account_df = account_with_flag_df.filter(col(\"o_IS_LATEST\") == 1)\n\n# \ud83d\udce4 Step 5: Write to target table\nlatest_account_df.select(\"ID\", \"NAME\", \"PERSONAL\", \"LASTMODIFIED_DATE\").write.jdbc(\n    url=jdbc_url,\n    table=\"DB_ACCOUNT\",\n    mode=\"overwrite\",  # Or \"append\" based on use case\n    properties=connection_properties\n)\n\n# Stop Spark session\nspark.stop()\n```"}
